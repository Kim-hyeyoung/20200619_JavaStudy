package com.sist.exception;
/*
 * 예외처리
 * 	= 자바의 모든 소스에는 예외처리가 있다 (생략 가능 / 생략 불가능)
 * 	= 프로그램을 실행하는 과정에서 오작동하거나 비정상적으로 종료하는 경우 => 에러/오류
 * 		** 윈도우 : 쓰레드 충돌, 주소값
 * 	======================
 * 	=> 프로그래머의 실수
 * 	=> 사용자 오류 (입력값, 작동을 잘못했을 경우)
 * 
 * 에러의 종류
 * 	= 컴파일 에러 : 컴파일시 에러 (문법상의 에러)
 * 	= 실행시 에러 : 실행시 발생하는 에러 (사용자 입력 에러)
 * 	= 논리적 에러 : 실행은 되나 의도와 다르게 동작 (프로그램 순서가 틀린 경우)
 * 
 * 실제 에러 종류
 * 	= 에러 : 프로그래머가 소스상에서 수정할 수 없는 에러
 * 		= 메모리 부족 현상
 * 		= 이클립스 에러
 * 	= 예외 : 가벼운 에러 (수정이 가능한 에러)
 * 		= 소스상에서 수정이 가능
 * 		= 사용자가 0을 입력했을 때 => 다시 입력하시오
 * 		= 아이디 중복체크
 * 		= 파일 입출력 (경로명)
 * 		= 서버 (IP)
 *  	= 오라클 (오라클 주소, SQL)
 *  예외처리
 *  	=check : 컴파일러가 예외처리했는지 확인 => 반드시 예외처리를 해야 한다
 *  		= 파일 입출력, 메모리 입출력, 네트워크 입출력
 *  		= 데이터베이스 연결
 *  		= 쓰레드 충돌
 *  	=uncheck : 실행시 컴파일러가 예외처리를 확인하지 않는다 => 예외처리 생략 가능(필요한 경우에만 예외처리)
 *  		= 사용자 입력
 *  
 *  예외처리의 목적 : 프로그램의 비정상 종료를 방지하고 정상상태를 유지할 수 있게 한다 (견고한 프로그램)
 *  예외처리의 정의 : 사전에 예상되는 에러를 대비하는 코드를 만든다
 *  
 *  예외처리 방법
 *  	= 예외 복구 : 프로그래머가 예외 발생 경우를 직접 처리 => 정상 상태 유지  / 직접 처리
 *  			  try~catch~finally
 *  	= 예외 회피 : 다른 메소드로 전송 => 시스템에 의해서 처리  / 간접 처리
 *  			  throws
 *  	= 예외 임의 발생 : throw (테스트용)
 *  	= 사용자 정의 예외 : 자바 라이브러리에서 전체 에러를 지원하지 않는 경우
 *  		= 데이터형 : 직접 데이터형 제작(클래스)
 *  		= 메소드 : 사용자가 직접 제작
 *  		= 연산자, 제어문 (x)
 *  
 *  **try~catch~finally(생략 가능)
 *  	try : 평상시 자바 코딩 => 에러
 *  	catch : 에러 발생시 처리 부분 => 여러 개 사용 가능
 *  	finally : 에러가 발생하든 하지 않든 무조건 수행되는 문장 => 네트워크, 데이터베이스 프로그램에서는 반드시 존재
 *  											      ex) 서버 연결 해제
 *  
 *  	try
 *  	{
 *  		for(int i=0;i<10;i++)
 *  		{
 *  			i=3일 때 에러 
 *  		}
 *  	}catch(Exception e){} => i=0,1,2인 경우만 수행하고 종료
 *  
 *  ===============================================
 *  	try
 *  	{
 *  		for(int i=0;i<10;i++)
 *  		{
 *  			i=3일 때 에러
 *  		}catch(Exception e){} => i=3인 경우를 건너뛰고 i=4~9 부분 수행!!!
 *  	}
 *  
 *  =>  catch문의 위치에 따라 프로그램 수행이 달라진다!!
 *  
 */

public class MainClass {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//예외처리가 없는 상태
		/*
		int a=10;
		int b=0;
		int c=a/b; //error => 종료
		System.out.println("c="+c);
		System.out.println("정상적으로 프로그램 종료!");
		*/
			
		//예외처리
		try
		{
			int a=10;
			int b=0;
			int c=a/b;
			System.out.println("c="+c);
		}
		catch(Exception ex) 
		{
			System.out.println("0으로 나눌 수 없다");
		}
		System.out.println("프로그램 정상 종료");

		
		
		
	}

}
