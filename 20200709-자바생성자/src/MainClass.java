/*
 * 클래스 구성요소
 * 	= 변수 : 기본형 (String:참조형)
 * 	= 메소드 : 기능처리 (연산자,제어문)
 * 	= 생성자 : 선언한 변수에 대한 초기값 => 존재하지 않을 수 있다
 * 		생성자의 특징
 * 		1. 클래스명과 동일
 * 		2. 리턴형이 없다
 * 		3. 생성자는 여러개 있을 수 있다 => 오버로딩(같은함수 다른기능)		
 * 									**오버로딩
 * 									1) 같은 이름의 메소드
 * 									2) 한 개의 클래스 안에서 제작
 * 									3) 매개변수의 개수나 데이터형이 다르다
 * 									4) 리턴형은 관계없다 ==================> void aaa()  double aaa() 는 같은 함수임 => 매개변수의 개수를 바꾸거나 데이터형을 다르게 주어야 함
 * 		4. 생성자의 역할
 * 			1) 클래스를 메모리에 저장할 경우에 반드시 호출되어야 한다
 * 			2) 멤버변수의 초기값 담당
 * 				=> 윈도우,네트워크,쓰레드,데이터베이스
 * *** 클래스 영역
 * public class MainClass 
 * {
 * 		=> 제어문,연산처리 기능을 수행할 수 없다
 * 			=> {}안에서 작업 가능 => 메소드(생성자메소드)
 * 		=> 변수 선언만 가능
 * 		   ======
 * 			1) 기본형
 * 			2) 클래스
 * 			3) 배열
 * 		구현 : 연산, 제어문, 라이브러리 => 메소드 안에서만 사용 가능
 * 								  ===== 선언 => 지역변수
 * 		선언 : 클래스 영역 안에서는 선언만 가능
 * ===========================================================
 * 		class에 변수 선언
 * 		1) 따로 저장해서 사용하는 변수 => 멤버변수, 인스턴스변수
 * 		2) 하나만 저장해서 공통으로 사용하는 변수 => 공유변수, 정적변수, 클래스 변수  => static
 * 		class에서 만드는 메소드
 * 		1) 따로 저장되는 메소드 => 인스턴스 메소드
 * 		2) 공통으로 사용하는 메소드 => 정적 메소드
 * 		3) 저장에 필요한 메소드 => 생성자 메소드  => 생성자는 static이 없다
 * 		class A =>>오버로딩
 * 		=> A()  ===> default 생성자
 * 		=> A(int a)
 * 		=> A(double d)
 * 		=> A(int a,int b)
 * 
 * 		class A
 * 		{
 * 
 * 		}
 * 			==> A a=new A(); //생성자가 없는 경우 가상머신이 자동으로 Default 생성자를 추가하기 때문에 new A가 가능
 * 		class A
 * 		{
 * 			A(){
 * 			}
 * 		}
 * 			==> A a=new A();
 * 		class A
 * 		{
 * 			A()(int a){
 * 			}
 * 		}	
 * 			==> A a=new A(10);
 * 
 * 	생성자를 이용하지 않는 방법
 *	{
 *		a=1000;
 *		b=2000;
 *	}   => 초기화 블록
 * 
 * 
 * 
 * 
 * }
 */
import javax.swing.*;
public class MainClass {
	JComboBox box=new JComboBox(); //선언
	MainClass() // 혹은 생성자를 주면 가능
	{
	box.addItem("영화");
	box.addItem("음악");
	box.addItem("맛집"); //구현   => 때문에 오류
	} //=> {}를 이용하면 구현해서 초기값 주기가 가능!! => 초기화 블록

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		
		
		
		
		
		
		
		
		
		
		
		
	}

}
