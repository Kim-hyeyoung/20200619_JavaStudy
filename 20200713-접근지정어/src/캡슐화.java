/*
 * 클래스의 구성 요소
 * =멤버변수
 * =생성자
 * =메소드
 * =============
 * 객체지향의 3대 요소
 * =데이터 보호 (데이터를 사용하지 못하게 만드는 작업 : 은닉화 / 클래스와 클래스의 연결 => 감춘 데이터를 메소드를 통해서 접근 가능하게 함 : 캡슐화)
 *  	=접근지정어
 *  				같은 클래스     같은폴더(패키지)  다른폴더(상속받는경우)  모든 클래스
 *  	==============================================================
 *  	public  	  o			o  				o				o
 *  	==============================================================
 *  	protected	  o			o				o				x
 *  	==============================================================
 *  	default 	  o			o				x				x
 *  	==============================================================
 *  	private		  o			x				x				x
 *  	==============================================================
 *  	접근 범위 크기
 *  	public > protected > default > private
 *  	사용방식
 *  		멤버변수
 *  		=====> 다른 클래스에서 값을 변경할 수 없게 은닉화 => private
 *  		메소드
 *  		생성자
 *  		=====> 다른 클래스와 연결해서 프로그램이 동작 => public
 *  
 *  	1) public : 전체공개, 어떤 위치든 상관없이 사용 가능 ex) public int age;
 *  	2) protected : 상속을 받는 경우 하위 클래스에서 사용 가능 ex) protected String name;
 *  			**상속 예외 조건
 *  			1) static : 사용 가능
 *  			2) private : 상속되나 사용 불가
 *  			3) 생성자 : 상속x
 *  	3) default : 같은 패키지 안에서 사용 가능 => src ex) String name;
 *  	4) private : 자신의 클래스에서만 사용 가능(비공개)
 *  				=> 다른 클래스에서도 사용 가능하게 => 메소드를 통해서 접근 가능
 *  =재사용 기법
 *  	=상속 : is-a
 *  	=포함 : has-a
 *  =수정, 추가
 *  	=다형성
 *  		=오버로딩 : 새로운 기능 추가
 *  		=오버라이딩 : 기존에 있던 기능을 수정
 *  ==================================>유지보수를 용이하게 만드는 기법
 *  => 실행 속도가 늦다(객체지향)
 *     =================> POJO(Spring)
 *     

 *  
 *     
 */
public class 캡슐화 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
