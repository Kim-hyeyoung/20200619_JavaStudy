/*
 * 	비트연산자 ( & | ^ )(and, or, xor) => 비트와 비트를 연산, 회로, 암호화/복호화  
 * 		8
 * 		=======
 * 		1 0 0 0
 * 		=======
 * 		6
 * 		=======
 * 		0 1 1 0
 * 
 * 			 &  |  ^(같은비트0 다른비트1)
 *     		(*)(+)
 *     00    0  0  0 
 *     01    0  1  1
 *     10    0  1  1
 *     11    1  1  0
 *     =============
 *     
 *     10    &    5
 *     1010  &   101
 *     1010  &   0101  비트숫자 안맞아서 앞에 0붙여줌
 *     => 0000 => 0
 *     
 *     10    |    5
 *     1010  |   101
 *     1010  |   0101
 *     => 1111 => 15
 *     
 *     10    ^    5
 *     1010  ^   101
 *     1010  ^   0101
 *     => 1111 => 15
 *     
 *     27    &   13
 *     11011 &  01101
 *     => 01001 => 9
 *     
 *     27    |   13
 *     11011 |  01101
 *     => 11111 => 31 
 *     
 *     27    ^   13
 *     11011 ^  01101
 *     => 10110 => 22
 *    
 *     
 *     
 *     
 */
public class 이상연산자_비트연산자 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println(27&13);
		System.out.println(27|13);
		System.out.println(27^13);
		
		System.out.println(0b10110);  //2진법 10진법으로 바꾸기
		System.out.println(Integer.toBinaryString(27)); //10진법 2진법으로 바꾸기
		
		
		

	}

}
